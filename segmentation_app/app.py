import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import plotly.express as px


st.set_page_config(page_title="Segmentation Client", layout="wide")


# Chargement des donn√©es
@st.cache_data
def load_data():
    return pd.read_csv(r"data\marketing_campaign_clean_cluster.csv")

df = load_data()


# Titre principal
st.title("üìä Application de Segmentation Client")

# Tabs : Accueil, Vue globale, Analyse par cluster
tab1, tab2, tab3, tab4 = st.tabs(["üè† Accueil", "üåç Vue Globale", "üîç Analyse par Cluster", "üìö Conclusion sur les cluster" ])



# ---------- Tab 1: Accueil ----------
with tab1:
    st.header("Bienvenue !")
    st.markdown("""
    Cette application permet d'explorer une segmentation client issue d'une analyse de **clustering**.
    
    Elle permet √† l'entreprise de mieux comprendre ses clients et d'adapter plus facilement ses produits 
    aux besoins, comportements et pr√©occupations sp√©cifiques de chaque type de client√®le.
    
     permet √† une entreprise d'adapter son produit en fonction de sa client√®le cible issue de diff√©rents 
    segments de client√®le. Par exemple, au lieu de d√©penser de l'argent pour commercialiser un nouveau produit 
    aupr√®s de chaque client de sa base de donn√©es, une entreprise peut analyser le segment de client√®le le plus 
    susceptible d'acheter le produit et le commercialiser uniquement aupr√®s de ce segment.
    
    **Fonctionnalit√©s :**
    - Visualisation des clusters
    - Analyse descriptive des segments
    - Comparaison des caract√©ristiques
    
    Donn√©es : `marketing_campaign_clean_cluster.csv` avec les colonnes principales et la variable `Cluster`.
    """)


    # ---------- Tab 2: Vue Globale ----------

with tab2:
    st.header("üåç Visualisation Globale des Clusters")

    # PCA pour visualisation
    features = df.drop(columns=["Cluster"])
    pca = PCA(n_components=2)
    pca_result = pca.fit_transform(features)
    df["PCA1"], df["PCA2"] = pca_result[:, 0], pca_result[:, 1]

    fig = px.scatter(df, x="PCA1", y="PCA2", color=df["Cluster"].astype(str),
                     title="Projection PCA des clients par cluster",
                     labels={"color": "Cluster"})
    st.plotly_chart(fig, use_container_width=True)

    # Stats globales
    st.subheader("üìà Statistiques g√©n√©rales")

    df = df.drop(columns=['Unnamed: 0' , 'PCA1' , 'PCA2'])

    st.subheader("üë§ Personnes")
    st.markdown("""**Carat√©ristiques g√©n√©rales**""")
    df_personne = df[['Cluster', 'age_Customer', 'Income', 'Children_num', 'Recency']]
    st.dataframe(df_personne.groupby("Cluster").mean(numeric_only=True).round(2))

    # Liste des variables √† tracer
    variables = [col for col in df_personne.columns if col != "Cluster"]

    # Nombre de colonnes dans la grille (modulable)
    n_cols = 2

    # Cr√©ation de lignes de boxplots
    for i in range(0, len(variables), n_cols):
        cols = st.columns(n_cols)
        for j, var in enumerate(variables[i:i + n_cols]):
            with cols[j]:
                fig = px.box(
                    df_personne,
                    x="Cluster",
                    y=var,
                    color="Cluster",
                    title=f"{var} par cluster",
                    labels={"Cluster": "Cluster", var: var}
                )
                st.plotly_chart(fig, use_container_width=True)
        

    st.markdown("""**Statut marital % de personnes en couple**""")
    df_relationship = df[['Cluster','relationship']]

    # Initialisation d'un DataFrame vide avec la colonne 'Cluster'
    result_relashionship = df_relationship[["Cluster"]].drop_duplicates().reset_index(drop=True)
    for var in df_relationship.columns:
        if var != "Cluster":
            temp = (
                df_relationship.groupby("Cluster")[var]
                .apply(lambda x: ((x == 1).mean() * 100).round(0))
                .reset_index(name=f"{var}_1")
            )               
            if result_relashionship.empty:
                 result_relashionship = temp
            else:
                result_relashionship = result_relashionship.merge(temp, on="Cluster")

    # Affichage final
    st.dataframe(result_relashionship)
   

    st.markdown("""**Education, % de personne dans le niveau d'√©ducation**""")
    df_education = df[['Cluster','Education_2n Cycle', 'Education_Basic', 'Education_Graduation', 
                       'Education_Master', 'Education_PhD']]

    # Initialisation d'un DataFrame vide avec la colonne 'Cluster'
    result_education = df_education[["Cluster"]].drop_duplicates().reset_index(drop=True)
    for var in df_education.columns:
        if var != "Cluster":
            temp = (
                df_education.groupby("Cluster")[var]
                .apply(lambda x: ((x == 1).mean() * 100).round(0))
                .reset_index(name=f"{var}_1")
            )               
            if result_education.empty:
                 result_education = temp
            else:
                result_education = result_education.merge(temp, on="Cluster")

    # Affichage final
    st.dataframe(result_education)

    st.markdown("""**Complaintes, % de personnes ayant fait au moins une r√©clamation**""")
    df_complaintes = df[['Cluster','Complain']]
    result_complaintes = df_complaintes[["Cluster"]].drop_duplicates().reset_index(drop=True)
    for var in df_complaintes.columns:
        if var != "Cluster":
            temp = (
                df_complaintes.groupby("Cluster")[var]
                .apply(lambda x: ((x == 1).mean() * 100).round(2))
                .reset_index(name=f"{var}_1")
            )                
            if result_complaintes.empty:
                 result_complaintes = temp
            else:
                result_complaintes = result_complaintes.merge(temp, on="Cluster")
    
    # Affichage final
    st.dataframe(result_complaintes)


    st.subheader("ü•ïüç∑üç¨ Produits achet√©s, montants moyens")
    df_produits = df[['Cluster','MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 
                      'MntSweetProducts', 'MntGoldProds','MntTotal']]
    st.dataframe(df_produits.groupby("Cluster").mean(numeric_only=True).round(0))

    # Liste des variables √† tracer
    variables = [col for col in df_produits.columns if col != "Cluster"]

    # Nombre de colonnes dans la grille (modulable)
    n_cols = 2

    # Cr√©ation de lignes de boxplots
    for i in range(0, len(variables), n_cols):
        cols = st.columns(n_cols)
        for j, var in enumerate(variables[i:i + n_cols]):
            with cols[j]:
                fig = px.box(
                    df_produits,
                    x="Cluster",
                    y=var,
                    color="Cluster",
                    title=f"{var} par cluster",
                    labels={"Cluster": "Cluster", var: var}
                )
                st.plotly_chart(fig, use_container_width=True)
            

    st.subheader("üìâ Promotion, nombre moyen")
    df_promotion = df[['Cluster','NumDealsPurchases','Total_Accepted_Campaigns']]
    st.dataframe(df_promotion.groupby("Cluster").mean(numeric_only=True).round(2))
     # Liste des variables √† tracer
    variables = [col for col in df_promotion.columns if col != "Cluster"]

    # Nombre de colonnes dans la grille (modulable)
    n_cols = 2

    # Cr√©ation de lignes de boxplots
    for i in range(0, len(variables), n_cols):
        cols = st.columns(n_cols)
        for j, var in enumerate(variables[i:i + n_cols]):
            with cols[j]:
                fig = px.box(
                    df_promotion,
                    x="Cluster",
                    y=var,
                    color="Cluster",
                    title=f"{var} par cluster",
                    labels={"Cluster": "Cluster", var: var}
                )
                st.plotly_chart(fig, use_container_width=True)
            


    st.subheader("üè¨ Lieu d'achat, nombre d'achats moyen effectu√©s sur le lieu")
    df_lieu = df[['Cluster','NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth']]
    st.dataframe(df_lieu.groupby("Cluster").mean(numeric_only=True).round(0))
    # Liste des variables √† tracer
    variables = [col for col in df_lieu.columns if col != "Cluster"]

    # Nombre de colonnes dans la grille (modulable)
    n_cols = 2

    # Cr√©ation de lignes de boxplots
    for i in range(0, len(variables), n_cols):
        cols = st.columns(n_cols)
        for j, var in enumerate(variables[i:i + n_cols]):
            with cols[j]:
                fig = px.box(
                    df_lieu,
                    x="Cluster",
                    y=var,
                    color="Cluster",
                    title=f"{var} par cluster",
                    labels={"Cluster": "Cluster", var: var}
                )
                st.plotly_chart(fig, use_container_width=True)
            
    
    # ---------- Tab 3: Analyse par Cluster ----------
with tab3:
    st.header("üîç Analyse d√©taill√©e par cluster")

    # S√©lection du cluster
    cluster_ids = sorted(df["Cluster"].unique())
    selected_cluster = st.selectbox("Choisir un cluster √† analyser :", cluster_ids)

    cluster_df = df[df["Cluster"] == selected_cluster]
    st.write(f"Nombre de clients dans ce cluster : {len(cluster_df)}")

    # ------------------ Variables quantitatives ------------------
    st.subheader("üìå Moyennes des variables quantitatives pour ce cluster")
    quanti_df = cluster_df.drop(columns=[
        'AcceptedCmp1', 'AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5',
        'Complain','Response','relationship','Puchases_total'
    ])
    st.dataframe(quanti_df.describe().T[["mean", "std"]].round(2))

    st.subheader("üìä Distribution des variables")

    st.markdown("### üìà Variables num√©riques")
    numeric_cols = quanti_df.select_dtypes(include='number').columns.tolist()

    if numeric_cols:
        selected_col = st.selectbox("Choisissez une variable num√©rique :", numeric_cols)

        fig = px.histogram(cluster_df, x=selected_col, nbins=20,
                           title=f"Distribution de {selected_col} (Cluster {selected_cluster})",
                           labels={selected_col: selected_col})
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Aucune variable num√©rique trouv√©e dans ce cluster.")

    # ------------------ Variables qualitatives binaires ------------------
    st.markdown("### üßæ Variables qualitatives (binaires 0/1)")
    qual_df = cluster_df[['Education_2n Cycle', 'Education_Basic', 'Education_Graduation', 
                          'Education_Master', 'Education_PhD','Complain','Response','relationship']]

    binary_vars = [col for col in qual_df.columns if qual_df[col].dropna().isin([0, 1]).all() and qual_df[col].nunique() <= 2]

    if binary_vars:
            selected_var = st.selectbox("Choisissez une variable binaire :", binary_vars)

            # Compter les 0 et 1 dans le cluster s√©lectionn√©
            counts = cluster_df[selected_var].value_counts().reset_index()
            counts.columns = [selected_var, 'Nombre de clients']
            total = counts['Nombre de clients'].sum()

            # Calcul du pourcentage
            counts['%'] = round(100 * counts['Nombre de clients'] / total, 1)

            fig = px.bar(counts,
                        x=selected_var,
                        y='%',
                        text='%',
                        title=f"Distribution (%) de la variable binaire '{selected_var}' (Cluster {selected_cluster})",
                        labels={selected_var: selected_var, '%': 'Pourcentage'})

            fig.update_traces(textposition='outside')
            fig.update_layout(xaxis=dict(tickmode='array', tickvals=[0, 1]),
                            yaxis=dict(title='Pourcentage (%)'))

            st.plotly_chart(fig, use_container_width=True)


    # ------------------ Conclusion sur les cluster ------------------
with tab4:
    st.markdown("""
                
    ### **Cluster 0**

**Caract√©ristiques g√©n√©rales :**

Ce groupe se compose de clients plus √¢g√©s, avec un revenu √©lev√©, peu d‚Äôenfants, et des clients r√©cents. 59 % sont en couple. Tous ont obtenu un dipl√¥me. Ils ont tendance √† faire des r√©clamations.

**Comportement d‚Äôachat :**

Ils r√©alisent le **montant d‚Äôachat total le plus √©lev√©**, √† √©galit√© avec le Cluster 1. Toutefois, ils ach√®tent **moins de fruits, poissons, sucreries et or**, mais **plus de vin** que le Cluster 1.

**Promotions et campagnes :**

Ils ach√®tent **peu de produits en promotion**, mais sont ceux qui **acceptent le plus d‚Äôoffres lors des campagnes marketing**.

**Canaux d‚Äôachat :**

Ils effectuent **principalement leurs achats en grande surface** et **consultent tr√®s peu le site web**.

---

### **Cluster 1**

**Caract√©ristiques g√©n√©rales :**

Deuxi√®me groupe le plus √¢g√©, avec un revenu √©lev√© et peu d‚Äôenfants. Les clients sont plus anciens que ceux du Cluster 0. 59 % sont en couple, tous dipl√¥m√©s, et ils sont ceux qui font **le plus de r√©clamations**.

**Comportement d‚Äôachat :**

Ils partagent avec le Cluster 0 **le montant d‚Äôachat total le plus √©lev√©**, mais consomment **davantage de fruits, poissons, sucreries et or**, et **moins de vin** que le Cluster 0.

**Promotions et campagnes :**

Ils ach√®tent **peu de produits en promotion**, mais **acceptent un grand nombre d‚Äôoffres commerciales**.

**Canaux d‚Äôachat :**

Comme le Cluster 0, ils privil√©gient **les grandes surfaces** et **utilisent peu le site web**.

---

### **Cluster 2**

**Caract√©ristiques g√©n√©rales :**

Le groupe le plus jeune, avec les **revenus les plus faibles** et **plus d‚Äôenfants**. Ce sont les clients **les plus anciens** parmi les 4 clusters. 66 % sont en couple. Leur **niveau d‚Äô√©ducation est √©lev√©**, avec une majorit√© ayant un **master ou un doctorat**. Ils font **peu de r√©clamations**.

**Comportement d‚Äôachat :**

Ils pr√©sentent le **montant d‚Äôachat total le plus faible**, √† √©galit√© avec le Cluster 3, bien que l√©g√®rement sup√©rieur. Ils ach√®tent **davantage de fruits, viandes, poissons, sucreries et or**, et **moins de vin** que le Cluster 3.

**Promotions et campagnes :**

Ils ach√®tent **beaucoup de produits en promotion**, mais **acceptent peu d‚Äôoffres commerciales**.

**Canaux d‚Äôachat :**

Leurs achats se font **en grande surface ou sur le site web**.

---

### **Cluster 3**

**Caract√©ristiques g√©n√©rales :**

Groupe √©galement tr√®s jeune, avec **revenus bas** et **plus d‚Äôenfants**. Clients tr√®s anciens comme dans le Cluster 2. 59 % sont en couple. Le **niveau d‚Äô√©ducation est √©lev√©**, avec un grand nombre de **masters ou doctorats**. Ils font √©galement **peu de r√©clamations**.

**Comportement d‚Äôachat :**

Ils ont le **montant d‚Äôachat total le plus faible**, √† √©galit√© avec le Cluster 2, mais l√©g√®rement en dessous. Ils ach√®tent **moins de fruits, viandes, poissons, sucreries et or**, mais **plus de vin** que le Cluster 2.

**Promotions et campagnes :**

Ils sont ceux qui **ach√®tent le plus en promotion**, mais **acceptent le moins d‚Äôoffres de campagne**.

**Canaux d‚Äôachat :**

Ils effectuent leurs achats **en grande surface ou via le site web**.""")